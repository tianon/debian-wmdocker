Index: docker-1.4/docker.c
===================================================================
--- docker-1.4.orig/docker.c
+++ docker-1.4/docker.c
@@ -9,7 +9,9 @@
 #include <glib.h>*/
 #include <assert.h>
 #include <signal.h>
+#include <string.h>
 #include <stdlib.h>
+#include <unistd.h>
 
 int argc;
 char **argv;
@@ -79,7 +82,7 @@ void parse_cmd_line()
         g_printerr("-border requires a parameter\n");
         help = TRUE;
       }
-      } else if (0 == strcasecmp(argv[i], "-iconsize")) {
+	} else if (0 == strcasecmp(argv[i], "-iconsize")) {
       ++i;
       if (i < argc) {
         int s = atoi(argv[i]);
@@ -106,7 +118,7 @@ void parse_cmd_line()
       g_print("Usage: %s [OPTIONS]\n\n", argv[0]);
       g_print("Options:\n");
       g_print("  -help             Show this help.\n");
-      g_print("  -display DISLPAY  The X display to connect to.\n");
+      g_print("  -display DISPLAY  The X display to connect to.\n");
       g_print("  -border           The width of the border to put around the\n"
               "                    system tray icons. Defaults to 1.\n");
       g_print("  -vertical         Line up the icons vertically. Defaults to\n"
@@ -218,7 +247,6 @@ void fix_geometry()
   width = horizontal ? 0 : icon_size;
   height = horizontal ? icon_size : 0;
   for (it = icons; it != NULL; it = g_slist_next(it)) {
-    TrayWindow *traywin = it->data;
     if (horizontal)
       width += icon_size;
     else
@@ -358,4 +386,6 @@ int main(int c, char **v)
   event_loop();
 
   XCloseDisplay(display);
+
+  return 0;
 }
Index: docker-1.4/kde.h
===================================================================
--- docker-1.4.orig/kde.h
+++ docker-1.4/kde.h
@@ -6,6 +6,7 @@
 
 extern Atom kde_systray_prop;
 
+void kde_init();
 void kde_update_icons();
 
 #endif /* __kde_h */
Index: docker-1.4/kde.c
===================================================================
--- docker-1.4.orig/kde.c
+++ docker-1.4/kde.c
@@ -1,4 +1,5 @@
 #include "kde.h"
+#include "icons.h"
 #include "docker.h"
 #include "xproperty.h"
 #include <assert.h>
Index: docker-1.4/net.c
===================================================================
--- docker-1.4.orig/net.c
+++ docker-1.4/net.c
@@ -15,14 +15,14 @@ static Atom net_message_data_atom;
 #define SYSTEM_TRAY_BEGIN_MESSAGE   1
 #define SYSTEM_TRAY_CANCEL_MESSAGE  2
          
-static net_create_selection_window()
+static void net_create_selection_window()
 {
   net_sel_win = XCreateSimpleWindow(display, root, -1, -1, 1, 1, 0, 0, 0);
   assert(net_sel_win);
 }
 
 
-static net_destroy_selection_window()
+static void net_destroy_selection_window()
 {
   XDestroyWindow(display, net_sel_win);
   net_sel_win = None;
Index: docker-1.4/icons.h
===================================================================
--- docker-1.4.orig/icons.h
+++ docker-1.4/icons.h
@@ -4,6 +4,7 @@
 #include <glib.h>
 #include <X11/Xlib.h>
 #include "docker.h"
+#include "net.h"
 
 extern gboolean error;
 
Index: docker-1.4/icons.c
===================================================================
--- docker-1.4.orig/icons.c
+++ docker-1.4/icons.c
@@ -1,4 +1,5 @@
 #include "icons.h"
+#include <stdlib.h>
 #include <assert.h>
 
 gboolean error;
@@ -35,7 +36,6 @@ gboolean icon_swallow(TrayWindow *traywi
 gboolean icon_add(Window id, TrayWindowType type)
 {
   TrayWindow *traywin;
-  XEvent e;
 
   assert(id);
   assert(type);
@@ -44,7 +44,7 @@ gboolean icon_add(Window id, TrayWindowT
     /* do we have room in our window for another icon? */
     int max = (width / icon_size) * (height / icon_size);
     if (g_slist_length(icons) >= max)
-      return; // no room, sorry! REJECTED!
+      return FALSE; // no room, sorry! REJECTED!
   }
 
   traywin = g_new0(TrayWindow, 1);
